# === –û–±–ª–∞—á–Ω–∞—è —Å–∞–º–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è + TG-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: gh CLI –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω; –≤ Settings ‚Üí Secrets ‚Üí Actions –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID

set -euo pipefail

REPO="${REPO:-$(git config --get remote.origin.url 2>/dev/null | sed -E 's#.*github.com[:/](.+/.+)\.git#\1#' || true)}"
REPO="${REPO:-konstantinsenatov/ai-trade-bot}"
echo "üì¶ Repo: $REPO"
gh --version >/dev/null
gh auth status

echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ TG secrets‚Ä¶"
MISS=0; for S in TELEGRAM_BOT_TOKEN TELEGRAM_CHAT_ID; do
  gh secret list -R "$REPO" | grep -q "^$S\b" && echo "‚úÖ $S" || { echo "‚ùå $S –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"; MISS=1; }
done
[ "$MISS" -eq 0 ] || { echo "‚õî –î–æ–±–∞–≤—å secrets –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏."; exit 2; }

# –û–∫–Ω–æ –¥–∞—Ç ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞ (UTC). –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ START/END.
START="${START:-$(python3 - <<'PY'
from datetime import datetime, timezone, timedelta
print((datetime.now(timezone.utc)-timedelta(days=730)).strftime("%Y-%m-%d"))
PY
)}"
END="${END:-$(date -u +%F)}"
echo "üóì –û–∫–Ω–æ: $START ‚Üí $END (UTC)"

echo "üß™ Sanity-—Ñ–∞–π–ª—ã‚Ä¶"
test -f .github/workflows/nightly-orchestrator.yml
test -f .github/workflows/bench-2y.yml
test -f scripts/bench.py
test -f scripts/backtest.py
test -f scripts/select_best.py

echo "üöÄ –ó–∞–ø—É—Å–∫ Nightly Orchestrator (dispatch bench-2y)‚Ä¶"
gh workflow run "Nightly Orchestrator" -R "$REPO" -f start_date="$START" -f end_date="$END"

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ bench-2y‚Ä¶"
sleep 8
RUN_JSON="$(gh run list -R "$REPO" --workflow="bench-2y.yml" --limit 1 --json databaseId,url,status,conclusion 2>/dev/null || true)"
if [ -z "$RUN_JSON" ] || [ "$RUN_JSON" = "[]" ]; then
  echo "‚Ä¶–ø–æ–¥–æ–∂–¥—É –µ—â—ë"; sleep 12
  RUN_JSON="$(gh run list -R "$REPO" --workflow="bench-2y.yml" --limit 1 --json databaseId,url,status,conclusion)"
fi

RID="$(echo "$RUN_JSON" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(d[0]["databaseId"])')"
RURL="$(echo "$RUN_JSON" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(d[0]["url"])')"
echo "üîó Bench run: $RURL (id=$RID)"

echo "üëÄ –°—Ç—Ä–∏–º–ª—é –ª–æ–≥–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è‚Ä¶"
gh run watch "$RID" -R "$REPO" --interval 12 --exit-status || true

echo "üì• –°–∫–∞—á–∏–≤–∞—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã‚Ä¶"
STAMP="${START}_${END}"
OUTDIR="artifacts/_downloads/${STAMP}"
mkdir -p "$OUTDIR"
gh run download "$RID" -R "$REPO" -D "$OUTDIR" || true

echo "üßæ –ò—Ç–æ–≥–æ:"
echo "  ‚Ä¢ Run: $RURL"
echo "  ‚Ä¢ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: $OUTDIR"
BEST="$(ls -1 "$OUTDIR"/*/best_params.json 2>/dev/null | head -n1 || true)"
PRETTY="$(ls -1 "$OUTDIR"/*/balanced_two_year_results.json 2>/dev/null | head -n1 || true)"
[ -n "$BEST" ] && { echo "‚Äî best_params.json:"; cat "$BEST"; } || echo "‚Äî best_params.json: –Ω–µ—Ç"
[ -n "$PRETTY" ] && { echo "‚Äî balanced_two_year_results.json (head):"; head -n 40 "$PRETTY"; } || echo "‚Äî balanced_two_year_results.json: –Ω–µ—Ç"

echo "üì≤ TG-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º workflow (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞). –ì–æ—Ç–æ–≤–æ."
