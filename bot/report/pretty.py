from __future__ import annotations

from dataclasses import asdict, dataclass
from datetime import datetime, timezone
from pathlib import Path
from typing import Any


def _iso(ts: int | None) -> str:
    if ts is None:
        return "N/A"
    return datetime.fromtimestamp(ts, tz=timezone.utc).strftime("%Y-%m-%d")


def _pct(x: float | None) -> str:
    return f"{x*100:.2f}%" if isinstance(x, (int, float)) else "N/A"


def _money(x: float | None) -> str:
    return f"${x:,.2f}" if isinstance(x, (int, float)) else "N/A"


@dataclass
class PrettyCtx:
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–æ–Ω–∞
    start_ts: int
    end_ts: int
    timeframe: str
    initial_balance: float = 1000.0
    target_text: str = "–¶–ï–õ–¨: +30‚Äì50% –≥–æ–¥–æ–≤—ã—Ö (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ)"
    # –î–∞–Ω–Ω—ã–µ / —Å–∏–≥–Ω–∞–ª—ã
    symbols_bars: list[tuple[str, int]] | None = None  # [("BTCUSDT", 17544), ...]
    signals_total: int | None = None  # –º–æ–∂–Ω–æ = trades
    signals_period: tuple[int, int] | None = None  # (first_ts, last_ts)
    # –ú–µ—Ç—Ä–∏–∫–∏ (—Ç–æ, —á—Ç–æ —É–∂–µ —Å—á–∏—Ç–∞–µ—Ç —Ç–≤–æ–π –±—ç–∫—Ç–µ—Å—Ç)
    metrics: dict[str, Any] | None = (
        None  # trades, final_equity, win_rate, pf, max_dd, return_pct, total_fees...
    )
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî —á–µ–∫–ø–æ–∏–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç, –±–∞–ª–∞–Ω—Å, —Å–¥–µ–ª–∫–∏)
    checkpoints: list[tuple[float, float, int]] | None = None
    # ¬´–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã¬ª (–ø–µ—á–∞—Ç–∞–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å)
    params: dict[str, Any] | None = (
        None  # e.g. {"base_pos": "6%", "max_pos": "10%", "fees_bps": 27}
    )
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    yearly: list[dict[str, Any]] | None = None  # [{"year":2023,"trades":..., "pnl":...}, ...]


def _annualized(total_return: float | None, years: float) -> float | None:
    # total_return –≤ –¥–æ–ª—è—Ö (–Ω–∞–ø—Ä., 0.5152 == +51.52%)
    if total_return is None:
        return None
    if years <= 0:
        return None
    return (1.0 + total_return) ** (1.0 / years) - 1.0


def _years_between(a_ts: int, b_ts: int) -> float:
    return max((b_ts - a_ts) / (365.25 * 24 * 3600), 0.0001)


def _line(s: str = "=", n: int = 70) -> str:
    return s * n


def render(ctx: PrettyCtx) -> str:
    m = ctx.metrics or {}
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    trades = m.get("trades")
    final_equity = m.get("final_equity")
    win_rate = m.get("win_rate")  # –¥–æ–ª–∏
    pf = m.get("pf")
    max_dd = m.get("max_dd")  # –¥–æ–ª–∏
    ret_pct = m.get("return_pct")  # –¥–æ–ª–∏
    total_fees = m.get("total_fees")

    years = _years_between(ctx.start_ts, ctx.end_ts)
    ann = _annualized(ret_pct, years) if ret_pct is not None else None
    net_profit = (
        (final_equity - ctx.initial_balance) if isinstance(final_equity, (int, float)) else None
    )
    multiple = (
        (final_equity / ctx.initial_balance)
        if isinstance(final_equity, (int, float)) and ctx.initial_balance > 0
        else None
    )

    # –®–∞–ø–∫–∞
    out = []
    out.append("‚öñÔ∏è –ó–∞–ø—É—Å–∫ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–≤—É—Ö–ª–µ—Ç–Ω–µ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞...")
    out.append("‚öñÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ì–û –¥–≤—É—Ö–ª–µ—Ç–Ω–µ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞")
    out.append(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {_money(ctx.initial_balance)}")
    out.append(f"üéØ {ctx.target_text}")
    # ¬´–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã¬ª –ø–µ—á–∞—Ç–∞–µ–º –∏–∑ ctx.params –µ—Å–ª–∏ –µ—Å—Ç—å
    if ctx.params:
        out.append("‚úÖ –í—Å–µ –±–∞–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã + –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        for k, v in ctx.params.items():
            out.append(f"   ‚Ä¢ {k}: {v}")

    out.append("")
    out.append("‚öñÔ∏è –ó–ê–ü–£–°–ö –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ì–û –î–í–£–•–õ–ï–¢–ù–ï–ì–û –ë–≠–ö–¢–ï–°–¢–ê")
    out.append(_line("="))
    out.append("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–≤—É—Ö–ª–µ—Ç–Ω–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    if ctx.symbols_bars:
        for sym, n in ctx.symbols_bars:
            out.append(f"‚úÖ {sym}: {n:,} –∑–∞–ø–∏—Å–µ–π")
    else:
        out.append("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—Å–º. –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)")

    out.append("‚öñÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    if ctx.signals_total is not None:
        out.append(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {ctx.signals_total:,} —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    else:
        out.append("üéØ –°–∏–≥–Ω–∞–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª–æ–≤
    if ctx.signals_period:
        sp_start, sp_end = ctx.signals_period
        out.append("")
        out.append("‚ö°Ô∏è –ù–ê–ß–ò–ù–ê–ï–ú –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–£–Æ –¢–û–†–ì–û–í–õ–Æ:")
        if trades is not None:
            out.append(f"üìä –°–∏–≥–Ω–∞–ª–æ–≤: {trades:,}")
        out.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {_iso(sp_start)} - {_iso(sp_end)}")

    # –ß–µ–∫–ø–æ–∏–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
    if ctx.checkpoints:
        out.append("")
        for p, bal, t in ctx.checkpoints:
            # p –≤ –¥–æ–ª—è—Ö, t ‚Äî —Å–¥–µ–ª–∫–∏ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            p_str = f"{p*100:.1f}%".rjust(5)
            bal_str = _money(bal)
            gain_abs = None
            if isinstance(bal, (int, float)):
                gain_abs = bal - ctx.initial_balance
            gain_pct = (
                (gain_abs / ctx.initial_balance)
                if (gain_abs is not None and ctx.initial_balance > 0)
                else None
            )
            out.append(
                f"‚è≥ {p_str} | –ë–∞–ª–∞–Ω—Å: {bal_str} ({'+' if (gain_pct or 0)>=0 else ''}{_pct(gain_pct)}) | –°–¥–µ–ª–æ–∫: {t:,}"
            )

        if trades is not None and ctx.signals_total is not None:
            out.append("")
            out.append(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ {trades:,} –∏–∑ {ctx.signals_total:,} —Å–∏–≥–Ω–∞–ª–æ–≤")

    out.append("")
    out.append("‚öñÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ì–û –î–í–£–•–õ–ï–¢–ù–ï–ì–û –ë–≠–ö–¢–ï–°–¢–ê")
    out.append("")
    out.append(_line("="))
    out.append("")
    # –§–∏–Ω. —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    out.append(
        f"üí∞ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –§–ò–ù–ê–ù–°–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ({_iso(ctx.start_ts)}-{_iso(ctx.end_ts)}):"
    )
    out.append(_line("-"))
    out.append(f"–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:      {_money(ctx.initial_balance)}")
    out.append(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:       {_money(final_equity)}")
    out.append(f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:         {_money(net_profit)}")
    out.append(f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:       {('+' if (ret_pct or 0)>=0 else '')}{_pct(ret_pct)}")
    out.append(f"–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:     {('+' if (ann or 0)>=0 else '')}{_pct(ann)}")
    out.append(
        f"–ü—Ä–∏—Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞:       {f'{multiple:.2f}x' if isinstance(multiple,(int,float)) else 'N/A'}"
    )
    out.append("")
    # –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    out.append("üìä –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    out.append(_line("-"))
    out.append(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:           {trades if trades is not None else 'N/A'}")
    out.append(f"–í–∏–Ω—Ä–µ–π—Ç:                {_pct(win_rate)}")
    out.append(
        f"Profit Factor:          {pf:.2f}"
        if isinstance(pf, (int, float))
        else "Profit Factor:          N/A"
    )
    out.append(f"–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞:         {_pct(max_dd)}")
    out.append(f"–ö–æ–º–∏—Å—Å–∏–∏ (–∏—Ç–æ–≥–æ):       {_money(total_fees)}")
    out.append("")
    # –ü–æ –≥–æ–¥–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if ctx.yearly:
        out.append("üìÖ –ê–ù–ê–õ–ò–ó –ü–û –ì–û–î–ê–ú:")
        out.append(_line("-"))
        for y in ctx.yearly:
            yy = y.get("year", "YYYY")
            tr = y.get("trades", "N/A")
            pnl = y.get("pnl", None)
            out.append(f"{yy}: {tr} —Å–¥–µ–ª–æ–∫, PnL: {_money(pnl)}")
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –≥–æ–¥–∞–º
        ry = [y for y in ctx.yearly if "return_pct" in y]
        if ry:
            for y in ry:
                out.append(
                    f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {y['year']}: {('+' if y['return_pct']>=0 else '')}{_pct(y['return_pct'])}"
                )
        out.append("")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    if ctx.params:
        out.append("‚öñÔ∏è –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
        out.append(_line("-"))
        for k, v in ctx.params.items():
            out.append(f"‚úÖ {k}: {v}")
        out.append("")

    # –≠–≤–æ–ª—é—Ü–∏—è (—á–∏—Å—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –±–ª–æ–∫ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—é)
    out.append("üìà –≠–í–û–õ–Æ–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    out.append(_line("-"))
    out.append("–° –±–∞–≥–∞–º–∏:      n/a (–Ω–µ—Ä–µ–∞–ª—å–Ω–æ)")
    out.append("–ü–µ—Ä–µ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:    n/a (—Å–ª–∏—à–∫–æ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)")
    out.append("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ: n/a (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)")
    out.append("")

    # –°—Ç–∞—Ç—É—Å/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ PF/DD (–µ—Å–ª–∏ –µ—Å—Ç—å)
    status = (
        "üöÄ –û–¢–õ–ò–ß–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´"
        if isinstance(pf, (int, float))
        and pf >= 1.5
        and isinstance(max_dd, (int, float))
        and max_dd <= 0.2
        else "‚ÑπÔ∏è –ù–£–ñ–ù–ê –î–û–í–û–î–ö–ê"
    )
    out.append(f"üéØ –°—Ç–∞—Ç—É—Å: {status}")
    out.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫–∏ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–Ω–µ–≤—ã–±–æ—Ä–∫–µ")
    out.append("")
    # –ü—Ä–æ–µ–∫—Ü–∏—è (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω final_equity)
    if isinstance(final_equity, (int, float)):
        mul = multiple or 1.0

        def proj(x: float) -> str:
            y1 = x * (1.0 + (ann or 0.0))  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –∑–∞ –≥–æ–¥
            y2 = x * mul  # –∑–∞ 2 –≥–æ–¥–∞ –ø–æ –∏—Ç–æ–≥—É
            return f"${x:,.0f} ‚Üí ${y1:,.2f}/–≥–æ–¥ | ${y2:,.2f}/2–≥–æ–¥–∞"

        out.append("üí° –ü–†–û–ï–ö–¶–ò–Ø –ù–ê –ë–û–õ–¨–®–ò–ô –ö–ê–ü–ò–¢–ê–õ:")
        out.append(_line("-"))
        for cap in (5_000, 10_000, 25_000, 50_000, 100_000):
            out.append(proj(cap))
        out.append("")

    out.append("üéØ –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    out.append(_line("-"))
    out.append("üéâ –ú–ò–°–°–ò–Ø: –æ—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ –æ–±—Ä–∞–∑—Ü–µ)")
    out.append("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ balanced_two_year_results.json")
    return "\n".join(out)


def save_json(ctx: PrettyCtx, out_path: str | Path = "balanced_two_year_results.json") -> Path:
    p = Path(out_path)
    p.write_text(str(asdict(ctx)), encoding="utf-8")
    return p
