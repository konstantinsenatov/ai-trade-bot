#!/bin/bash
# === –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ–±–ª–∞—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å TG-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º ===
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: gh CLI –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω; –≤ —Ä–µ–ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã secrets TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID

set -euo pipefail

echo "üîé –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ gh CLI..."
REPO="${REPO:-$(git config --get remote.origin.url 2>/dev/null | sed -E 's#.*github.com[:/](.+/.+)\.git#\1#' || true)}"
REPO="${REPO:-konstantinsenatov/ai-trade-bot}"
echo "   ‚Üí REPO=$REPO"
gh --version >/dev/null
gh auth status

echo "üîê –ü—Ä–æ–≤–µ—Ä—è—é Telegram secrets –≤ $REPO..."
MISSING=0
for S in TELEGRAM_BOT_TOKEN TELEGRAM_CHAT_ID; do
  if ! gh secret list -R "$REPO" | grep -q "^$S\b"; then
    echo "‚ùå –ù–µ—Ç —Å–µ–∫—Ä–µ—Ç–∞: $S"
    MISSING=1
  else
    echo "‚úÖ $S –Ω–∞–π–¥–µ–Ω"
  fi
done
if [ "$MISSING" -ne 0 ]; then
  echo "‚õî –î–æ–±–∞–≤—å secrets TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ Settings ‚Üí Secrets and variables ‚Üí Actions –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏."
  exit 2
fi

echo "‚è± –í—ã—á–∏—Å–ª—è—é –æ–∫–Ω–æ –¥–∞—Ç (UTC, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞)..."
START="$(python3 - <<'PY'
from datetime import datetime, timezone, timedelta
end = datetime.now(timezone.utc)
start = end - timedelta(days=730)
print(start.strftime("%Y-%m-%d"))
PY
)"
END="$(date -u +%F)"
echo "   ‚Üí START=$START  END=$END"

echo "üß™ –ë—ã—Å—Ç—Ä—ã–π sanity-check —Ñ–∞–π–ª–æ–≤..."
test -f .github/workflows/nightly-orchestrator.yml
test -f .github/workflows/bench-2y.yml
test -f scripts/bench.py
test -f scripts/backtest.py
test -f scripts/select_best.py

echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é Nightly Orchestrator (dispatch bench-2y)..."
gh workflow run "Nightly Orchestrator" -R "$REPO" -f start_date="$START" -f end_date="$END"

echo "‚è≥ –ñ–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ bench-2y..."
sleep 6
# –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π run bench-2y
BENCH_RUN_JSON="$(gh run list -R "$REPO" --workflow="bench-2y.yml" --limit 1 --json databaseId,url,status,conclusion 2>/dev/null || true)"
if [ -z "$BENCH_RUN_JSON" ] || [ "$BENCH_RUN_JSON" = "[]" ]; then
  echo "‚Ä¶ bench-2y –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –ø–æ–¥–æ–∂–¥—É –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ"
  sleep 10
  BENCH_RUN_JSON="$(gh run list -R "$REPO" --workflow="bench-2y.yml" --limit 1 --json databaseId,url,status,conclusion)"
fi

BENCH_ID="$(echo "$BENCH_RUN_JSON" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(d[0]["databaseId"])')"
BENCH_URL="$(echo "$BENCH_RUN_JSON" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(d[0]["url"])')"
echo "üîó Bench run: $BENCH_URL (id=$BENCH_ID)"

echo "üëÄ –°—Ç—Ä–∏–º–ª—é –ª–æ–≥–∏ bench-2y –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
# –Ω–µ –ø–∞–¥–∞—Ç—å –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º !=0, –Ω–∞–º –≤–∞–∂–Ω–æ –¥–æ–±–µ–∂–∞—Ç—å –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
gh run watch "$BENCH_ID" -R "$REPO" --interval 10 --exit-status || true

echo "üì• –°–∫–∞—á–∏–≤–∞—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã..."
STAMP="${START}_${END}"
OUTDIR="artifacts/_downloads/${STAMP}"
mkdir -p "$OUTDIR"
gh run download "$BENCH_ID" -R "$REPO" -D "$OUTDIR" || true

echo "üßæ –ò—Ç–æ–≥:"
echo "   Bench run: $BENCH_URL"
echo "   –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: $OUTDIR"
JSON_GLOB="$(ls -1 "$OUTDIR"/*/balanced_two_year_results.json 2>/dev/null | head -n1 || true)"
BEST_GLOB="$(ls -1 "$OUTDIR"/*/best_params.json 2>/dev/null | head -n1 || true)"
[ -n "$BEST_GLOB" ] && { echo "‚Äî best_params.json:"; cat "$BEST_GLOB"; } || echo "‚Äî best_params.json: –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å —à–∞–≥ select_best)"
[ -n "$JSON_GLOB" ] && { echo "‚Äî balanced_two_year_results.json (–ø–µ—Ä–≤—ã–µ 40 —Å—Ç—Ä–æ–∫):"; head -n 40 "$JSON_GLOB"; } || echo "‚Äî balanced_two_year_results.json: –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo "üì≤ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–∞–º workflow (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞). –ì–æ—Ç–æ–≤–æ."
